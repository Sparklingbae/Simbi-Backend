// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "./generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String              @id @default(uuid())
  username            String              @unique
  email               String              @unique
  passwordHash        String
  firstName           String
  lastName            String
  educationLevel      String?
  timezone            String?              @default("UTC")
  preferredStudyMethod String?
  createdAt           DateTime            @default(now())
  lastLogin           DateTime?
  preAssesmentQuestions  Json?
  
  // Relations
  studyPlans          StudyPlan[]
  studySessions       StudySession[]
  milestones          Milestone[]

  @@map("users")
}


model StudyPlan {
  id            String       @id @default(uuid())
  userId        String
  name          String
  subjects      String[]
  startDate     DateTime
  endDate       DateTime
  totalHours    Float
  difficultyLevel String
  planData      Json         // Stores the full generated plan as JSON
  status        String       // "active", "completed", "archived"
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  
  // Relations
  user          User         @relation(fields: [userId], references: [id])
  studySessions StudySession[]

  @@map("study_plans")
}

model StudySession {
  id          String      @id @default(uuid())
  userId      String
  studyPlanId String?
  date        DateTime
  startTime   DateTime
  endTime     DateTime?
  duration    Int?        // Duration in minutes
  topic       String
  notes       String?
  completed   Boolean     @default(false)
  
  // Relations
  user        User        @relation(fields: [userId], references: [id])
  studyPlan   StudyPlan?  @relation(fields: [studyPlanId], references: [id])

  @@map("study_sessions")
}

model Milestone {
  id          String      @id @default(uuid())
  userId      String
  studyPlanId String?
  description String
  targetDate  DateTime
  completed   Boolean     @default(false)
  
  // Relations
  user        User        @relation(fields: [userId], references: [id])

  @@map("milestones")
}