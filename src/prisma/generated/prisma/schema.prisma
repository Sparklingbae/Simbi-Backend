// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "./generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   String    @id @default(uuid())
  username             String    @unique
  email                String    @unique
  passwordHash         String
  firstName            String?
  lastName             String?
  educationLevel       String?
  timezone             String?   @default("UTC")
  preferredStudyMethod String?
  createdAt            DateTime  @default(now())
  lastLogin            DateTime?

  // Relations
  subjects         Subject[]
  studyPlans       StudyPlan[]
  studySessions    StudySession[]
  milestones       Milestone[]
  quizAttempts     QuizAttempt[]
  progressTracking ProgressTracking[]

  @@map("users")
}

model Subject {
  id              String   @id @default(uuid())
  userId          String
  name            String
  educationLevel  String
  educationYear   Int?
  colorCode       String   @default("#3498db")
  difficultyLevel Int      @default(3)
  priority        Int      @default(3)
  createdAt       DateTime @default(now())

  // Relations
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  studyPlans    StudyPlan[]
  quizQuestions QuizQuestion[]

  @@unique([userId, name])
  @@index([userId])
  @@map("subjects")
}

model StudyPlan {
  id                 String     @id @default(uuid())
  userId             String
  subjectId          String
  planName           String
  dailyTargetMinutes Int
  startDate          DateTime   @db.Date
  endDate            DateTime   @db.Date
  createdAt          DateTime   @default(now())
  lastUpdated        DateTime   @default(now()) @updatedAt
  status             PlanStatus @default(ACTIVE)

  // Relations
  user            User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  subject         Subject           @relation(fields: [subjectId], references: [id])
  studySessions   StudySession[]
  planDailyStatus PlanDailyStatus[]
  milestones      Milestone[]

  @@index([userId])
  @@index([subjectId])
  @@map("study_plans")
}

model StudySession {
  id                 String   @id @default(uuid())
  planId             String
  userId             String
  sessionDate        DateTime @db.Date
  startTime          DateTime
  endTime            DateTime
  durationMinutes    Int
  notes              String?
  productivityRating Int?
  simbiReaction      String   @default("neutral")

  // Relations
  plan StudyPlan @relation(fields: [planId], references: [id], onDelete: Cascade)
  user User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([planId])
  @@index([userId])
  @@index([sessionDate])
  @@map("study_sessions")
}

model PlanDailyStatus {
  id                  String      @id @default(uuid())
  planId              String
  date                DateTime    @db.Date
  totalMinutesStudied Int         @default(0)
  targetAchieved      Boolean     @default(false)
  status              DailyStatus

  // Relations
  plan StudyPlan @relation(fields: [planId], references: [id], onDelete: Cascade)

  @@unique([planId, date])
  @@index([planId])
  @@index([date])
  @@map("plan_daily_status")
}

model Milestone {
  id                 String          @id @default(uuid())
  userId             String
  planId             String?
  title              String
  description        String?
  dueDate            DateTime?       @db.Date
  completionCriteria String?
  status             MilestoneStatus @default(PENDING)
  createdAt          DateTime        @default(now())
  completedAt        DateTime?

  // Relations
  user User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  plan StudyPlan? @relation(fields: [planId], references: [id], onDelete: SetNull)

  @@index([userId])
  @@index([planId])
  @@map("milestones")
}

model QuizQuestion {
  id            String       @id @default(uuid())
  subjectId     String
  userId        String?
  questionText  String
  questionType  QuestionType
  difficulty    Int          @default(3)
  options       Json?
  correctAnswer String
  explanation   String?
  createdAt     DateTime     @default(now())
  aiGenerated   Boolean      @default(false)

  // Relations
  subject              Subject               @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  quizAttemptQuestions QuizAttemptQuestion[]

  @@index([subjectId])
  @@map("quiz_questions")
}

model QuizAttempt {
  id              String    @id @default(uuid())
  userId          String
  subjectId       String
  startTime       DateTime  @default(now())
  endTime         DateTime?
  totalQuestions  Int
  correctAnswers  Int       @default(0)
  scorePercentage Decimal   @default(0) @db.Decimal(5, 2)

  // Relations
  user                 User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  quizAttemptQuestions QuizAttemptQuestion[]

  @@index([userId])
  @@index([subjectId])
  @@map("quiz_attempts")
}

model QuizAttemptQuestion {
  id            String   @id @default(uuid())
  quizAttemptId String
  questionId    String
  userAnswer    String?
  isCorrect     Boolean?

  // Relations
  quizAttempt QuizAttempt  @relation(fields: [quizAttemptId], references: [id], onDelete: Cascade)
  question    QuizQuestion @relation(fields: [questionId], references: [id])

  @@index([quizAttemptId])
  @@index([questionId])
  @@map("quiz_attempt_questions")
}

model ProgressTracking {
  id                String    @id @default(uuid())
  userId            String
  date              DateTime  @db.Date
  studyMinutes      Int       @default(0)
  completedSessions Int       @default(0)
  missedSessions    Int       @default(0)
  currentStreak     Int       @default(0)
  simbiState        String    @default("neutral")
  motivationLevel   Int       @default(3)
  lastInteraction   DateTime?

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, date])
  @@index([userId])
  @@index([date])
  @@map("progress_tracking")
}

enum PlanStatus {
  ACTIVE
  COMPLETED
  ARCHIVED
}

enum DailyStatus {
  COMPLETED
  PARTIAL
  MISSED
}

enum MilestoneStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  MISSED
}

enum QuestionType {
  MULTIPLE_CHOICE
  TRUE_FALSE
  SHORT_ANSWER
}
